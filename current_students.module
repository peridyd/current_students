<?php
/**
 * Implements hook_help
 * 
 * Displays help and module information
 * @param path
 * 	Which path of the site we're using to display help
 * @param arg
 * 	Array that holds the current path as returned from the arg() function
 */
function current_students_help($path, $arg) {
	switch ($path) {
		case "admin/help#current_students" :
			return '<p>' . t ( "Imports institutional student data into the Writing Center modules." ) . '</p>';
			break;
	}
}

/**
 * Implements hook_block_info()
 */
function current_students_block_info() {
	$blocks ['current_students'] = array (
			// The name that will appear in the block list.
			'info' => t ( 'Current Students active' ),
			// default setting
			'cache' => DRUPAL_CACHE_PER_ROLE 
	);
	return $blocks;
}

/**
 * Implements hook_user_login
 * 1.
 * First checks for the account information and attempts to match the account information with current_student data
 * 2. If the student data exists and hasn't recently been imported into yc_patron, then import/update the information
 * 3. If the student data exists, then set the student role
 * 4. Log the account creation or update via Watchdog
 * 5. If account already exists, then do nothing.
 */
function current_students_user_login(&$edit, $account) {
	global $user;
	$userID = '';
	$ONID = '';
	$count = 0;
	$userID = $user->uid;
	$student = FALSE;
	$message = 'default';
	
	// my first query using the Drupal database API
	$result = db_select ( 'cas_user', 'cas' )->addTag ( 'node_access' )->fields ( 'cas', array (
			'cas_name' 
	) )->condition ( 'cas.uid', $userID )->execute ();
	foreach ( $result as $row ) {
		$ONID = $row->cas_name;
	}
	if (($ONID == '') || (strlen ( $ONID ) == 0)) { // Not an OSU user. Likely an account created by an administrator
	                                             // do nothing
		return;
	} else {
		// is this a new or a returning user?
		// check yc_patron for the answer
		$result = db_query ( 'Select count(*) as count from {patron} p Where p.ONID = :ONID', array (
				':ONID' => $ONID 
		) );
		foreach ( $result as $row ) {
			$count = $row->count;
			//drupal_set_message($count);
		} 
		if ($count == 0) {
			// has never used the Writing Center before
			$newbie = TRUE;
		} else {
			$newbie = FALSE;
		}
		/**
		 * Need to look for data in the current students table. This dataset will be used below regardless of 
		 * whether or not we need to register/update the student record
		 */
		$query = db_select ( 'currentstudents', 'cs' );
			$query->addField('cs', 'ONIDID', 'ONID');
			$query->addField('cs', 'DirectoryStudentE-mail', 'EmailAddress');
			$data = $query
				->fields('cs', array('FirstName', 'LastName', 'StudentID', 'Gender', 'Term', 'ClassStanding', 
					'ClassStandingDesc', 'IntlEnglishProgramFlag', 'PrimaryMajor1',
					'StuLevelCode', 'StuLevelCodeDesc'))
				->addTag('node_access')
				->condition('cs.ONIDID', $ONID)		
				->execute();
		$dataLength = 0;
		foreach ($data as $row) {
			$dataLength ++;
			$firstName = $row->FirstName;
			$lastName = $row->LastName;
			$studentID = $row->StudentID;
			$email = $row->EmailAddress;
			$gender = $row->Gender;
			$term_cs = $row->Term;
			$classStanding = $row->ClassStanding;
			$classStandingDesc = $row->ClassStandingDesc;
			$INTOFlag = $row->IntlEnglishProgramFlag;
			$primaryMajor = $row->PrimaryMajor1;
			$studentLevelCode = $row->StuLevelCode;
			$studentLevelCodeDesc = $row->StuLevelCodeDesc;
		}
		if ($dataLength == 1) {
			// we have a student
			$student = TRUE;
		}
		if (($count == 0) && ($newbie)) {
			// new student who needs to be registered
			// perform an insert
			if ($dataLength == 1) {
				$insertID = db_insert ('patron')
				->fields (array(
						'FirstName' => $firstName,
						'LastName' => $lastName,
						'EmailAddress' =>$email,
						'ONID' => $ONID,
						'StudentID' => $studentID,
						'Gender' => $gender,
						'Term' => $term_cs,
						'ClassStanding' => $classStanding,
						'ClassStandingDesc' => $classStandingDesc,
						'IntlEnglishProgramFlag' => $INTOFlag,
						'PrimaryMajor1' => $primaryMajor,
						'StuLevelCode' => $studentLevelCode,
						'StuLevelCodeDesc' => $studentLevelCodeDesc
				) )
				->execute ();
			$message = 'Student account: ' . $user->uid . ', ' . check_plain($ONID) . ', created. ID: ' . check_plain($insertID) . '.';
			watchdog(WATCHDOG_NOTICE, $message);
			return;
			}
		} elseif (($count == 0) && $newbie == FALSE) {
			// not a student, return;
			$message = "Non-student account: $user->uid, $ONID, returning, logged in successfully.";
			watchdog(WATCHDOG_NOTICE, $message);
			return;
		} elseif (($count == 1) && ($newbie == FALSE)) {
			/**
			 * 1.
			 * already has a student account. Check to see if it needs updating
			 * 2. if not, return with no watchdog log
			 * 3. if the record needs updating, then do so and log it in watchdog
			 * 4. return
			 */
			$termLastUpdate = db_query ( 'Select term from {patron} p Where p.ONID = :ONID', array (
					':ONID' => $ONID 
			) );
			foreach ( $termLastUpdate as $row ) {
				$term_patron = $row->term;
			}

			if ($term_patron != $term_cs) {
				// update
				$rowsAffected = db_update('patron')
					->fields (array(
						'FirstName' => $firstName,
						'LastName' => $lastName,
						'StudentID' => $studentID,
						'EmailAddress' => $email,
						'Gender' => $gender,
						'Term' => $term_cs,
						'ClassStanding' => $classStanding,
						'ClassStandingDesc' => $classStandingDesc,
						'IntlEnglishProgramFlag' => $INTOFlag,
						'PrimaryMajor1' => $primaryMajor,
						'StuLevelCode' => $studentLevelCode,
						'StuLevelCodeDesc' => $studentLevelCodeDesc
				) )
					->condition('ONID', $ONID)
					->execute ();
				$message = 'Student account: ' . $user->uid . ', ' . check_plain($ONID) . ', updated. ' . check_plain($rowsAffected) . ' rows affected.';
				watchdog(WATCHDOG_NOTICE, $message);
				return;
			} else {
				// no update needed
				$message ='Student account: ' . $user->uid . ', ' . check_plain($ONID) . ', logged in. No update needed.';
				watchdog (WATCHDOG_NOTICE, $message);
				return;
			}
		} else {
			//non-student, new user
			$message = "A new, non-student user, $user->uid, $user->name, logged in. Hmmm.";
			watchdog(WATCHDOG_ALERT, $message);
		}
	}
}